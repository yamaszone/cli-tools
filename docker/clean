#!/bin/bash

confirm(){
	read -p "DESTRUCTIVE! Are you sure (y/n)? " -n 1 -r
	echo  # Move to a new line
	if [[ $REPLY =~ ^[Nn]$ ]]
	then
		exit
	fi
}

check_container_list(){
	CONT_IDS=$1
	if [[ ! -z $CONT_IDS ]]; then
		echo "The following containers will be removed:"
		echo $CONT_IDS
	else
		echo "No containers found."
		exit 1
	fi
}

list_all_containers(){
	CONT_IDS=$(docker ps -aq)
	check_container_list "$CONT_IDS"
}

list_exited_containers(){
	CONT_IDS=$(docker ps -q -f "status=exited")
	check_container_list "$CONT_IDS"
}

remove_all_containers(){
	docker rm -f $(docker ps -aq)
}

remove_exited_containers(){
	docker rm -f $(docker ps -q -f "status=exited")
}

remove_untagged_images(){
	docker images -a | grep "^<none>" | awk '{print $3}' | xargs docker rmi -f
}

help(){
	echo "Usage: clean"
	printf "\t ca, containers-all\t: Remove all containers.\n"
	printf "\t ce, containers-exited\t: Remove exited containers.\n"
	printf "\t fr, force-remove\t: Force remove exited containers.\n"
	printf "\t images\t\t\t: Remove untagged images.\n"
	printf "\t h, help\t\t: Show this help.\n"
	exit 0
}

if [[ -z $1 ]];then
	help
	exit 0
fi

case $1 in
	ca | containers-all)
		list_all_containers
		confirm
		remove_all_containers
		;;
	ce | containers-exited)
		list_exited_containers
		confirm
		remove_exited_containers
        ;;
	fr | force-remove)
		remove_exited_containers
		;;
	images)
		remove_untagged_images
		;;
	* | h | help)
		help
		;;
esac
